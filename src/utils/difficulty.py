#!/usr/bin/env python

# Required inputs are as following:
#   pFileLoc:   location of performace csv file that is generated by parsing
#               all the ROS bags usuing performance.py and
#               performenca_subscriber.py
#   drFileLoc:  location of original difficulty rating csv file
#   tiFileLoc:  location where to save the updated master trial_info csv file
#               with added difficulty rating column for all subjects
#   tiFolderLoc:    location of trial_info files for individual subjests
#   tiFolderLocNew: location where to save all the updated individual
#                   trial_info files with included difficulty rating column

# Importing library
import pandas as pd
import os.path
import glob


class update_performance:
    """Update performance file to include difficulty rating column."""

    def __init__(self, pFileLoc, drFileLoc, tiFileLoc, tiFolderLoc, tiFolderLocNew):

        # read the performance csv files with pandas
        self.dfP = pd.read_csv(pFileLoc + 'performance.csv')

        # read the difficulty rating csv files with pandas and get the list of
        # all the subject IDs that completed the trial ratings
        self.df = pd.read_csv(drFileLoc)  # Entire csv file
        self.dfID = pd.read_csv(drFileLoc, usecols=[0])  # Subject ID only
        self.dfIDList = self.df['Subject'].tolist()  # Creating a list

        self.update_trial_info(tiFolderLoc, tiFolderLocNew)
        self.combine_trials(tiFileLoc, tiFolderLocNew)
        self.new_performance(pFileLoc)

    def update_trial_info(self, tiFolderLoc, tiFolderLocNew):
        """Update sub_trialorder files with individual difficulty ratings."""

        for sub in self.dfIDList:
            # print(sub)
            if sub < 10:
                subID = '0' + str(sub)
            else:
                subID = str(sub)

            # creating the difficulty rating column for each subject
            ratingList = self.df.loc[sub == self.df['Subject']].T
            # print(ratingList_df)

            # inserting zero values for Traning sessions
            new_index = ['Training1', 'Training2', 'Training3',
                         '1', '2', '3', '4', '5', '6', '7', '8', '9', '10']

            # update to column to be inserted in the new trial_info file
            finalList = ratingList.reindex(new_index, fill_value=0)
            # print(finalList)

            # Looping through trial_info and inserting column
            filename = tiFolderLoc + subID + '_trialorder.csv'
            # print(filename)

            # checking if there's trial info file for the particular subject
            if os.path.isfile(filename):
                # read trial_info cv and insert difficulty and subID column
                fields = ['Trial number', 'Control type', 'Complexity',
                          'Autonomy level', 'Player pos-x', 'Player pos-y']
                ti_df = pd.read_csv(filename, keep_default_na=False, usecols=fields)
                ti_df.insert(4, 'Difficulty Rating', finalList.to_numpy())
                ti_df.insert(0, 'Subject', subID)
                # print(ti_df)

                # creating a new csv file with added difficulty rating
                fileLoc = tiFolderLocNew + subID + '_trialorder_update.csv'
                ti_df.to_csv(fileLoc, index=False)

            else:
                print('Trial info for Subject ' + subID + ' does not exist.')

    def combine_trials(self, tiFileLoc, tiFolderLocNew):
        """Combine all sub_trialorder files in a master file."""

        all_files = glob.glob(tiFolderLocNew + "/*trialorder_update.csv")

        li = []

        for filename in all_files:
            df = pd.read_csv(filename, index_col=None, header=0,
                             skiprows=[i for i in range(1, 4)],
                             usecols=['Subject', 'Control type', 'Complexity',
                                      'Autonomy level', 'Difficulty Rating'])

            # Adjusting control type format to match perfromance.csv
            df['Control'] = df['Autonomy level'] + df['Control type']
            df.loc[df['Control type'] == 'none', ['Control']] = 'none'
            df.loc[df['Control type'] == 'waypoint', ['Control']] = 'waypoint'

            # removing unecessary columns
            df = df.drop(columns=['Control type', 'Autonomy level'])
            df = df.reindex(columns=['Subject', 'Control', 'Complexity', 'Difficulty Rating'])
            df = df.rename(columns={'Difficulty Rating': 'Difficulty'})

            li.append(df)

        self.dfTD = pd.concat(li, axis=0, ignore_index=True)

        # Sorting the data to match perfromance.csv file format. NOTE: this is
        # not necessary for the merging funcitonality, but *nice to have* for
        # ease of viewing

        # Define the sorter list
        sorter = ['none', 'waypoint', 'directergodic', 'sharedergodic', 'autoergodic']
        # Convert Control column to category
        self.dfTD.Control = self.dfTD.Control.astype("category")
        # Set the sorter as categories hierarchy
        self.dfTD.Control.cat.set_categories(sorter)
        # Perform sorting operation
        self.dfTD = self.dfTD.sort_values(['Subject', 'Complexity', 'Control'], ascending=[True, False, True])

        filename = tiFileLoc + 'trial_info_all.csv'
        self.dfTD.to_csv(filename, index=False)

    def new_performance(self,pFileLoc):
        """Create new performance csv file that includes difficulty ratings."""

        merged_df = self.dfP.merge(self.dfTD, how='left', on=['Subject', 'Complexity', 'Control'])
        merged_df = merged_df.fillna(0)  # replace all NaN with zeros
        merged_df = merged_df.rename(columns={'Difficulty Rating': 'Difficulty'})

        # Updates all single digit subject IDs display with 0 as this is
        # necessary for plot_data.py to properly save info into control.csv
        merged_df['Subject'] = merged_df['Subject'].astype(str).str.zfill(2)

        fileLocNew = pFileLoc + 'performance_update.csv'
        merged_df.to_csv(fileLocNew, index=False)
